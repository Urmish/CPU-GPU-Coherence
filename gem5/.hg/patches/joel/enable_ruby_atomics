# HG changeset patch
# Parent 9b04a2d84cda2bb136e374d7db32c4fea81ebf39
# User Joel Hestness <jthestness@gmail.com>
Ruby: Enable GPU-like atomic data updates

To support GPU-like atomic data updates, Ruby needs to differentiate GPU atomic
memory accesses in the RubyPort and Sequencer, and the RubyPort needs to call
out to separate functionality in gem5-gpu that is capable of completing the
memory accesses and associated atomic operations.
* * *
Updated to how atomics are handled.
will be folded into atomic patch

diff -r 9b04a2d84cda src/mem/ruby/system/RubyPort.cc
--- a/src/mem/ruby/system/RubyPort.cc	Tue Feb 10 14:13:56 2015 -0600
+++ b/src/mem/ruby/system/RubyPort.cc	Tue Feb 10 14:14:20 2015 -0600
@@ -43,6 +43,7 @@
 #include "debug/Config.hh"
 #include "debug/Drain.hh"
 #include "debug/Ruby.hh"
+#include "gpu/atomic_operations.hh"
 #include "mem/protocol/AccessPermission.hh"
 #include "mem/ruby/slicc_interface/AbstractController.hh"
 #include "mem/ruby/system/RubyPort.hh"
@@ -492,7 +493,15 @@
     DPRINTF(RubyPort, "Hit callback needs response %d\n", needsResponse);
 
     if (accessPhysMem) {
-        ruby_system->getPhysMem()->access(pkt);
+        if (pkt->req->isSwap() && pkt->req->isLocked() && pkt->isRead() &&
+            pkt->isWrite()) {
+            // Perform the packet's atomic operations on physical memory
+            AtomicOpRequest::atomicMemoryAccess(
+                                        pkt, ruby_system->getPhysMem());
+        } else {
+            ruby_system->getPhysMem()->access(pkt);
+        }
+
     } else if (needsResponse) {
         pkt->makeResponse();
     }
diff -r 9b04a2d84cda src/mem/ruby/system/Sequencer.cc
--- a/src/mem/ruby/system/Sequencer.cc	Tue Feb 10 14:13:56 2015 -0600
+++ b/src/mem/ruby/system/Sequencer.cc	Tue Feb 10 14:14:20 2015 -0600
@@ -628,6 +628,16 @@
             primary_type = RubyRequestType_Locked_RMW_Read;
         }
         secondary_type = RubyRequestType_ST;
+
+        if (pkt->req->isSwap()) {
+            //
+            // This is an atomic swap for GPU atomics from gem5-gpu.
+            // Re-set the secondary_type to be atomic
+            //
+            assert(pkt->isRead() && pkt->isWrite());
+            assert(primary_type == RubyRequestType_Locked_RMW_Write);
+            secondary_type = RubyRequestType_ATOMIC;
+        }
     } else {
         if (pkt->isRead()) {
             if (pkt->req->isInstFetch()) {
